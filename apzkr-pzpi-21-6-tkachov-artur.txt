Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії
КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для контролю та нагадування про медикаменти

Студент гр. ПЗПІ-21-6		 __________________ Ткачов А. О.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис) 

Роботу захищено «__»_________2024 р.
з оцінкою _________________________ 

Комісія: 				___________________ доц. Лещинський В.О. 
(підпис)
___________________ доц. Лещинська І.О. 
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)

Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук                  Кафедра програмної інженерії		    
Спеціальність 121 – Інженерія програмного забезпечення				
Курс		3	 Семестр 					6				
Навчальна дисципліна            Архітектура програмного забезпечення		

ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ
Ткачову Артуру Олеговичу					
1. Тема проєкту: 	Програмна система для контролю та нагадування про		 медикаменти "MediReminder"									
2. Термін узгодження завдання з лабораторних робіт «   1   »    квітня    2024 р.
3. Термін здачі завдання з лабораторних робіт «   14   »        червня        2024 р.
4. Вихідні дані до проєкту: оригінальність та неповторюваність; можливість	 подальшої монетизації; актуальність вирішуваної проблеми; орієнтованість 	
на масового користувача; масштабованість; підтримка інтернаціоналізації та	 локалізації; інтерфейс українською та англійською мовами; захист 		
персональних даних, відповідність сучасним стандартам щодо захисту даних;	 присутність серверної та клієнтської частини, мобільний та IoT програмний	 застосунок; вбудовані засоби адміністрування системи.				
5. Зміст звітів з лабораторних робіт (перелік питань, що належить
розробити) 	аркуш завдання та опис проєкту у форматі Vision & Scope;		 
серверна частина програмної системи; 	програмне забезпечення для  IoT	 пристрою; клієнтська частина програмної системи; мобільний програмний	 застосунок, як частина системи.								
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси) 			
UML	діаграму розгортання (Deployment Diagram); UML діаграму прецедентів
(Use Case Diagram); ER-модель даних (Entity–Relationship Model);			 
UML	діаграму діяльності (Activity Diagram); UML діаграму компонент		 (Component Diagram); UML діаграму взаємодії (Interaction Overview Diagram).	


КАЛЕНДАРНИЙ ПЛАН
№	Основні етапи виконання проєкту в рамках лабораторних робіт	Термін виконання етапів	Примітка
1	Vision&Scope	19.03.2024	Виконано
2	Серверна частина (Back-End)	02.04.2024	Виконано
3	Програмне забезпечення для  IoT або SmartDevice пристрою	16.05.2024	Виконано
4	Клієнтська частина застосунку (Front-End)	30.05.2024	Виконано
5	Мобільний застосунок	14.06.2024	Виконано

Дата видачі теми проєкту «  18  »       березня       2024 р.

Викладач лабораторних робіт		 			 ст. викл. Сокорчук І.П.
(підпис)

Завдання прийняв до виконання				 Ткачов А. О.
ст.гр. ПЗПІІ-21-6					(підпис)

РЕФЕРАТ
Пояснювальна записка до курсової роботи: 85 с., 20 рис., 3 табл., 2 додатки, 6 джерел.
МЕДИЦИНА, ПОБУТ, ДАТЧИКИ, ПРОДУКТИВНІСТЬ, АВТОМАТИЗАЦІЯ.
Об'єктом дослідження є система нагадування про прийом медикаментів для пацієнтів. Метою проєкту є розробка програмної системи для автоматизованого нагадування пацієнтам про необхідність прийому ліків, а також моніторингу їхнього медичного графіку. 
Методологія розробки базується на використанні наступних технологій: мікроконтролер ESP32 для збирання даних, ASP.NET для створення серверної частини, база даних для зберігання історичних даних про прийом ліків, та Angular для розробки користувацького інтерфейсу.
Програмна система дозволяє пацієнтам реєструвати свої ліки та графік їх прийому через веб-інтерфейс. Система зчитує дані про час і нагадує пацієнтам про необхідність прийому медикаментів через повідомлення. Інформація передається на сервер, де зберігається в базі даних для подальшого аналізу і моніторингу користувачами. Мобільний додаток, розроблений на Android, дозволяє пацієнтам у реальному часі відстежувати графік прийому ліків, отримувати нагадування. При недотриманні графіку прийому ліків система автоматично повідомляє пацієнта і лікаря про пропуск дози, що дозволяє оперативно реагувати на можливі проблеми в лікуванні.
Така програмна система дозволяє автоматизувати процес нагадування про прийом ліків, що сприяє підвищенню ефективності лікування і дотримання пацієнтами їхнього медичного графіку.
ЗМІСТ

ВСТУП......................................................................................................................6
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ.....................................................................7
1.1 Бізнес-вимоги.....................................................................................................7
  1.1.1 Бізнес можливості........................................................................................7
  1.1.2 Бізнес-цілі та критерії успіху.......................................................................8
  1.1.3 Потреби клієнтів або ринку........................................................................11
  1.1.4 Бізнес-ризики..............................................................................................13
1.2 Концепція рішення..........................................................................................15
  1.2.1 Окреслення концепції................................................................................15
  1.2.2 Головна функціональність.........................................................................16
  1.2.3 Припущення та залежності........................................................................18
1.3 Рамки та обмеження проєкту..........................................................................20
  1.3.1 Рамки первинного випуску........................................................................20
  1.3.2 Рамки наступних випусків.........................................................................22
  1.3.3 Обмеження та винятки...............................................................................23
1.4 Бізнес-контекст.................................................................................................23
  1.4.1 Профілі зацікавлених сторін......................................................................23
  1.4.2 Пріоритети проекту....................................................................................24
  1.4.3 Робоче середовище.....................................................................................26
2 ПОСТАНОВКА ЗАДАЧІ....................................................................................28
3 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ.............................................30
  3.1 Проектування серверної частини проекту...................................................30
  3.2 Проектування IoT-частини системи.............................................................36
  3.3 Проектування клієнтської частини проекту................................................37
4 РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ.......................................................48
4.1 Архітектура та розробка серверної частини.................................................48
4.1.1 Специфікація REST API..............................................................................49
  4.1.2 API для створення розкладу та його події...............................................58
  4.1.3 API Service для перевірки подій розкладу...............................................58
  4.1.4 API для активації пацієнтом події розкладу............................................60
4.2 Архітектура та розробка IoT частини............................................................61
4.3 Архітектура та розробка web частини...........................................................63
ВИСНОВКИ...........................................................................................................67
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ.....................................................................68
ДОДАТОК А...........................................................................................................69
ДОДАТОК Б...........................................................................................................81

ВСТУП
Сучасний ритм життя нерідко ставить перед людьми складні виклики, особливо тим, хто має потребу в систематичному прийомі лікарських препаратів.
Забезпечення правильного та своєчасного вживання медикаментів може бути важливим елементом підтримки здоров'я, проте навіть у добросовісних пацієнтів можуть виникати проблеми з дотриманням графіку лікування. Ці проблеми можуть бути пов'язані зі поганою пам’яттю, недостатнім розумінням інструкцій щодо вживання ліків або іншими факторами.
У зв'язку з цим виникає необхідність в розробці та впровадженні інноваційних рішень, спрямованих на покращення дотримання лікування та контроль за вживанням медикаментів. Нова технологічна ера відкриває широкі можливості для створення автоматизованих систем, які спрощують цей процес та забезпечують пацієнтів необхідною підтримкою.
Система "MediReminder" відповідає на ці виклики, пропонуючи розробку IoT-пристрою, який інтегрується в контейнери з медикаментами та надає комплексний контроль за їх вживанням. Цей пристрій не лише нагадує пацієнтам про час прийому ліків, але й відправляє повідомлення родичам чи лікарям у випадку, якщо пацієнт пропустив дозу. Крім того, система дозволяє спостерігати за вживанням медикаментів, оцінювати їх стан, а також замовляти нові партії ліків, якщо це необхідно. Такий інтегрований підхід дозволяє забезпечити не лише ефективне вживання медикаментів, але й зберігання контролю за станом здоров'я пацієнтів.
Цей проект має стратегічне значення для покращення якості життя пацієнтів, забезпеченням їхнього здоров'я та благополуччя. Реалізація системи "MediReminder" сприятиме не лише збереженню здоров'я, але й економії часу та ресурсів у сфері медичної допомоги.

1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес можливості

Ринок медичних технологій постійно розвивається, і інновації в цій галузі мають значний потенціал для поліпшення якості медичної допомоги та забезпечення зручності для пацієнтів.
Система "MediReminder" адресує важливу проблему в області забезпечення дотримання лікування та контролю за вживанням медикаментів, що стає особливо актуальним у зв'язку зі зростанням захворювань, які вимагають регулярного прийому ліків. Сучасні технології IoT надають можливості для створення інтелектуальних систем, які дозволяють пацієнтам та їхнім родичам більш ефективно керувати процесом лікування.
Зараз на ринку існують деякі рішення, такі як мобільні додатки для нагадування про вживання ліків, але вони не завжди забезпечують комплексний контроль та можливість взаємодії з лікарями та родичами. Система "MediReminder" вирішує цю проблему, поєднуючи в собі автоматичні нагадування, моніторинг вживання медикаментів та сповіщення для родичів та лікарів у випадку пропуску дози.
Цей продукт привабливий для ринку медичних технологій, оскільки він пропонує відмінну можливість поліпшення контролю за вживанням ліків та забезпечує цінний інструмент для пацієнтів, лікарів та родичів. Наразі не існує інших продуктів, які б забезпечували такий рівень інтеграції та зручності в процесі дотримання лікування. З урахуванням тенденцій у сфері медичних технологій, які все більше спрямовані на забезпечення пацієнтам доступу до інноваційних рішень, система "MediReminder" відповідає стратегічним напрямкам розвитку цього ринку.
Система "MediReminder" відкриває різноманітні можливості для монетизації, що ґрунтуються на представленні цінних послуг для пацієнтів, медичних установ та інших зацікавлених сторін. Ось деякі з можливих шляхів отримання прибутку:
– Введення системи підписки для користувачів, які бажають скористатися функціоналом системи "MediReminder". Підписка може бути різних рівнів доступу залежно від потреб користувача та наданих сервісів, таких як моніторинг вживання медикаментів, сповіщення для родичів та лікарів, аналітика тощо.
– Пропонування IoT-пристроїв для вбудовування в контейнери з медикаментами. Це може бути окрема лінійка пристроїв різних модифікацій, що відрізняються функціоналом та можливостями.
– Залучення до співпраці фармацевтичних компаній та інших медичних установ для реклами своїх продуктів чи послуг на платформі. Це може включати розміщення рекламних банерів, спонсорські повідомлення або інші форми реклами.
– Надання API для інтеграції системи "MediReminder" з іншими медичними програмами чи платформами. Це може бути платною послугою для розробників медичного програмного забезпечення, які бажають розширити функціональність своїх продуктів.
– Надання консультацій та навчання для медичних установ та фахівців щодо впровадження та використання системи "MediReminder" у їхній роботі.
Ці різноманітні шляхи монетизації дозволять забезпечити стійкий потік доходів та забезпечити успішний розвиток проекту на ринку медичних технологій.

1.1.2	Бізнес-цілі та критерії успіху

ВО-1: Збільшення обсягів продажів пристроїв "MediReminder". Однією з ключових цілей є досягнення певного обсягу продажів пристроїв протягом першого року після випуску на ринок. Ця мета може бути виражена в конкретних кількісних показниках, таких як кількість проданих пристроїв або обсяги продажів у грошовому еквіваленті.
ВО-2: Залучення підписників до платформи. Призначено привернути певну кількість підписників протягом першого року роботи платформи "MediReminder". Це може бути виміряно кількістю активних користувачів платформи або кількістю підписок, що підписались на платний доступ.
ВО-3: Збільшення прибутку від рекламних послуг. Мета включає збільшення прибутку від рекламних послуг, таких як розміщення реклами фармацевтичних компаній чи медичних установ на платформі "MediReminder". Це може бути виміряно в грошовому еквіваленті, збільшенні виручки від рекламних контрактів. 
ВО-4: Покращення репутації та визнання бренду. Мета полягає в підвищенні рівня впізнаваності та довіри до бренду серед цільової аудиторії. Це може бути виміряно через опитування клієнтів, індекси впізнаваності бренду та залученням участі у відгуках та рейтингах.
ВО-5: Забезпечення позитивного впливу на здоров'я пацієнтів. Однією з головних цілей є покращення здоров'я та благополуччя пацієнтів за допомогою системи "MediReminder". Це може бути виміряно за допомогою аналізу статистики вживання медикаментів, показників зниження кількості пропущених доз та покращення загального стану здоров'я пацієнтів. 
SC-1: Обсяги продажів пристроїв "MediReminder". Успішне досягнення цієї бізнес-цілі буде вимірюватися обсягами продажів пристроїв, які мають бути досягнуті протягом першого року після випуску на ринок. Критерій успіху – досягнення мінімального планування продажів на 80%.
SC-2: Кількість підписників платформи "MediReminder". Успіх цієї мети вимірюється кількістю активних користувачів платформи та кількістю підписок на платний доступ протягом першого року роботи. Критерій успіху – залучення не менше 50% цільової аудиторії до користування платформою.
SC-3: Прибуток від рекламних послуг. Успішне досягнення цієї цілі буде вимірюватися збільшенням прибутку від рекламних послуг на платформі "MediReminder". Критерій успіху – збільшення прибутку від рекламних послуг не менше ніж на 30% протягом першого року роботи.
SC-4: Репутація та визнання бренду "MediReminder". Успішне досягнення цієї мети буде вимірюватися за допомогою зростання рівня впізнаваності та довіри до бренду "MediReminder" серед цільової аудиторії. Критерій успіху – підвищення показників впізнаваності бренду на 50% протягом першого року роботи. 
SC-5: Покращення здоров'я пацієнтів. Успіх цієї мети вимірюється за допомогою зниження кількості пропущених доз, покращення загального стану здоров'я пацієнтів та зростання показників дотримання лікування. Критерій успіху – зниження кількості пропущених доз не менше ніж на 40% протягом першого року роботи. 
Фактори, які впливатимуть на успіх:
а) Внутрішні фактори:
   1) Якість та функціональність продукту. Успіх системи "MediReminder" залежить від якості та функціональності продукту.
   2) Маркетингові та продажні зусилля. Ефективність маркетингу та продажів визначатимуть рівень усвідомленості про продукт серед цільової аудиторії та його успішне введення на ринок.
   3) Співпраця з медичними установами та фармацевтичними компаніями. Партнерство з медичними установами та фармацевтичними компаніями може забезпечити доступ до цільової аудиторії та підтримку впровадження системи "MediReminder".
   4) Управління проектом та ресурси. Ефективне управління проектом, розподіл ресурсів та вчасна реакція на зміни можуть суттєво вплинути на успіх розробки та впровадження системи "MediReminder".
б) Зовнішні фактори:
   1) Конкурентна обстановка на ринку. Рівень конкуренції та реакція конкурентів на випуск системи "MediReminder" можуть вплинути на успіх проекту. Конкуренти можуть запровадити аналогічні рішення або вдосконалення, що призведе до зміни у ринковій долі.
   2) Зміни у законодавстві та регулятивному середовищі. Зміни в правовому середовищі, пов'язані з медичною технологією, можуть вплинути на процес розробки, сертифікації та впровадження системи "MediReminder".
   3) Економічна ситуація та фінансові ринкові умови. Зміни у економіці можуть вплинути на споживчу здатність та інвестиційний клімат, що вплине на ринок медичних технологій та попит на систему "MediReminder".
Успіх буде визначатися як досягнення поставлених цілей щодо функціональності, продуктивності та ефективності витрат, а також відповідності законодавству.

1.1.3	Потреби клієнтів або ринку

Потреби типових клієнтів:
а) Пацієнти з хронічними захворюваннями:
   1) Потреба – пацієнти з хронічними захворюваннями потребують систему, яка допоможе їм регулярно та вчасно приймати ліки у відповідності до розпису, оскільки вони мають складний режим прийому та часто забувають про прийом ліків.
   2) Проблеми – ці пацієнти стикаються з проблемою виконання режиму лікування, що може призвести до погіршення їх стану здоров'я, підвищення ризику ускладнень та збільшення медичних витрат.
   3) Вирішення – система "MediReminder" надає регулярні нагадування про прийом ліків, сповіщає пацієнтів у випадку пропущених доз та надсилає повідомлення родичам або лікарям, забезпечуючи надійний контроль за вживанням медикаментів.
б) Люди похилого віку:
   1) Потреба – люди похилого віку часто мають складнощі зі сприйняттям та пам'яттю, тому вони потребують простої та зрозумілої системи нагадування про вживання ліків.
   2) Проблеми – погіршення пам'яті може призвести до пропуску доз ліків, що загрожує їх здоров'ю та благополуччю.
   3) Вирішення – "MediReminder" надає простий та інтуїтивно зрозумілий інтерфейс, а також регулярні нагадування, що полегшує процес вживання медикаментів для людей похилого віку.
в) Люди зі зміненим режимом дня:
   1) Потреба – люди з неправильним або незвичним режимом дня потребують гнучкого та адаптивного способу нагадування про вживання ліків, який враховуватиме їхній індивідуальний графік.
   2) Проблеми – неправильний графік дня може призвести до пропуску прийому ліків, особливо якщо особа працює в нічну зміну або подорожує. 
   3) Вирішення – "MediReminder" забезпечує можливість налаштування гнучких нагадувань, які враховують індивідуальний розклад дня користувача, що полегшує дотримання режиму лікування.
Апаратне та програмне середовище:
– Апаратне середовище клієнта. Медіа пристрої, які підтримують сучасні мобільні операційні системи, такі як Android або iOS. Це можуть бути смартфони, планшети, а також інші пристрої, які можуть отримувати повідомлення та взаємодіяти з мобільними додатками.
– Програмне середовище клієнта. Додаток "MediReminder", який доступний для завантаження через офіційні магазини додатків. Додаток має оптимізований інтерфейс для мобільних пристроїв і підтримує функції нагадування про вживання ліків, сповіщення родичів та лікарів, перегляд статистики та інші функції, що допомагають користувачам ефективно контролювати своє лікування.
Критичні вимоги та вимоги до продуктивності:
– Надійність системи. Система повинна надійно працювати та виконувати свої функції без збоїв або відмов протягом тривалого періоду часу.
– Безпека даних. Забезпечення конфіденційності та цілісності медичних даних користувачів є критичною вимогою.
– Сумісність з різними платформами. Додаток повинен працювати на різних мобільних платформах, таких як Android та iOS.
– Інтуїтивний інтерфейс. Вимога до простоти та зручності інтерфейсу для забезпечення зручного використання користувачами будь-якого рівня технічної підготовки.
– Швидкість реакції. Додаток повинен швидко реагувати на вхідні дії користувача та відправляти нагадування вчасно.
– Мінімальне споживання ресурсів. Додаток повинен ефективно використовувати ресурси пристрою (батарею, процесор, пам'ять) для забезпечення мінімального впливу на продуктивність пристрою.
– Стабільність під навантаженням. Система повинна залишатися стабільною та продуктивною навіть при великому обсязі даних чи активному використанні користувачами.
– Ефективність мережевого зв'язку. Додаток повинен ефективно працювати навіть при обмеженому доступі до Інтернету або при низькій швидкості з'єднання.
1.1.4	Бізнес-ризики
Основні бізнес-ризики:
– Конкурентна боротьба. Існує ризик змагання з іншими подібними продуктами на ринку, які можуть мати більшу впізнаваність бренду або передові технології.
– Прийняття користувачами. Існує ризик, що користувачі можуть не прийняти нову систему або відмовитися від її використання через складність інтерфейсу чи інші негативні враження.
– Час розробки. Часовий тиск на розробку продукту може призвести до невдоволення з боку клієнтів або недоліків у функціональності через торгові обмеження.
– Реалізаційні проблеми. Існує ризик технічних або логістичних проблем під час реалізації продукту, що може призвести до затримок у випуску або витрат на виправлення помилок.
– Можливі негативні впливи на бізнес. Існує ризик, що продукт може мати негативний вплив на бізнес у разі низької популярності або недосягнення очікуваних фінансових результатів.
– Потреба у додатковому фінансуванні. Розробка та випуск продукту може потребувати значних інвестицій, існує ризик необхідності додаткового фінансування через збільшення витрат або затримки в графіку робіт.
Ступінь серйозності ризиків та дії для зменшення цих ризиків:
– Конкурентна боротьба. Серйозність ризику – висока. Дія – проведення детального аналізу конкурентів та визначення унікальних конкурентних переваг "MediReminder", впровадження інноваційних функцій та регулярні оновлення продукту для утримання конкурентоспроможності, активна маркетингова кампанія для підвищення впізнаваності бренду.
– Прийняття користувачами. Серйозність ризику – середній. Дія – проведення опитувань та тестувань серед цільової аудиторії для збору зворотного зв'язку під час розробки продукту, забезпечення простого та інтуїтивно зрозумілого інтерфейсу користувача.
– Час розробки. Серйозність ризику – висока. Дія – ретельне планування проекту з реалістичними термінами та проміжними контрольними точками, регулярний моніторинг прогресу та адаптація плану у разі виникнення затримок.
– Реалізаційні проблеми. Серйозність ризику – середній. Дія – залучення досвідчених фахівців для реалізації проекту, впровадження методів управління якістю та тестування продукту на всіх етапах розробки.
– Можливі негативні впливи на бізнес. Серйозність ризику – висока. Дія – проведення фінансового аналізу та оцінка потенційних ризиків перед запуском продукту, розробка стратегій виходу на нові ринки або сегменти у разі невдачі. 
– Потреба у додатковому фінансуванні. Серйозність ризику – середній. Дія –  проведення детального фінансового планування та бюджетування на ранніх етапах проекту, пошук потенційних інвесторів та партнерів для забезпечення додаткових фінансових ресурсів.

1.2	Концепція рішення
1.2.1	Окреслення концепції

Система "MediReminder" призначена для автоматичного контролю за вживанням медикаментів пацієнтами.
Метою продукту є створення інтелектуальної IoT-системи, яка покращить процес вживання ліків, забезпечить безпеку пацієнтів та підвищить ефективність лікування. "MediReminder" допоможе знизити ризик пропуску доз, зменшити ускладнення від неправильного вживання ліків та забезпечити своєчасне медичне втручання у разі потреби.
Значення продукту:
– Забезпечення своєчасного прийому ліків. Нагадування про прийом медикаментів допомагає пацієнтам дотримуватися режиму лікування.
– Контроль з боку родичів та лікарів. Сповіщення про пропущені дози дозволяють родичам та лікарям бути в курсі стану пацієнта та своєчасно реагувати.
– Зручність та простота використання. Інтуїтивно зрозумілий інтерфейс та простота налаштування забезпечують легке впровадження системи для користувачів будь-якого віку.
– Доступ до статистики. Можливість перегляду статистики вживання ліків допомагає пацієнтам і лікарям відстежувати ефективність лікування та вносити корективи.
Зміни після впровадження продукту:
– Покращення дотримання режиму лікування. Пацієнти частіше прийматимуть ліки вчасно, що підвищить ефективність лікування та зменшить ризики ускладнень.
– Зменшення навантаження на родичів та лікарів. Автоматичні сповіщення зменшать потребу у постійному контролі за пацієнтами з боку родичів та медичних працівників.
– Підвищення безпеки пацієнтів. Своєчасне виявлення пропущених доз та швидке втручання допоможуть запобігти можливим негативним наслідкам. 
– Збільшення рівня самостійності пацієнтів. Зручність використання системи дозволить пацієнтам бути більш незалежними у процесі лікування, що підвищить їхню впевненість у своїх силах.
Таким чином, "MediReminder" стане важливим інструментом для забезпечення здоров'я та безпеки пацієнтів, полегшуючи їхній режим лікування та надаючи необхідну підтримку з боку медичних працівників та родичів.
1.2.2	Головна функціональність
MF-1: Автоматичні нагадування про прийом ліків. Інтелектуальна система надсилає сповіщення пацієнтам про час прийому ліків, що допомагає забезпечити своєчасне вживання медикаментів.
MF-2: Сповіщення родичів та лікарів про пропущені дози. У разі пропуску дози ліків система автоматично відправляє повідомлення родичам або лікарям, що дозволяє їм швидко реагувати та надавати необхідну підтримку.
MF-3: Моніторинг стану ліків. Система дозволяє спостерігати за станом ліків у контейнері, включаючи терміни придатності та кількість залишку, що допомагає своєчасно поповнювати запас.
MF-4: Замовлення ліків. Функція автоматичного замовлення ліків допомагає пацієнтам своєчасно поповнювати свій запас медикаментів без необхідності відвідувати аптеку.
MF-5: Зв'язок з лікарем. Пацієнти можуть швидко зв'язатися зі своїм лікарем через додаток для консультацій або при виникненні питань щодо лікування. 
MF-6: Перегляд статистики вживання ліків. Пацієнти та лікарі можуть переглядати детальну статистику про прийом ліків, що дозволяє оцінювати ефективність лікування та вносити необхідні корективи.
MF-7: Інтуїтивно зрозумілий інтерфейс. Простий та зрозумілий інтерфейс додатка забезпечує легке використання системи для пацієнтів будь-якого віку та технічного рівня підготовки.
MF-8: Сумісність з мобільними платформами Додаток "MediReminder" доступний для мобільних платформ Android та iOS, що забезпечує широкий доступ до системи.
MF-9: Безпека та конфіденційність даних. Забезпечення високого рівня захисту персональних та медичних даних користувачів, відповідно до сучасних стандартів безпеки.
Споживчі характеристики: інтуїтивний інтерфейс забезпечує простоту використання; система надсилає автоматичні нагадування про прийом ліків; високий рівень захисту даних гарантує конфіденційність; надійна робота мінімізує ризик збоїв; користувачі можуть налаштовувати графік нагадувань та створювати індивідуальні профілі; забезпечено зворотній зв’язок і швидкий зв’язок з лікарем; доступна детальна статистика щодо вживання ліків; автоматичні сповіщення родичів та лікарів про пропущені дози; додаток доступний на Android та iOS; інтеграція з іншими медичними системами; система підвищує дотримання режиму лікування та знижує ризик ускладнень.
Відмінності від конкурентних продуктів:
– Автоматичні сповіщення родичів та лікарів. Система не лише нагадує пацієнтам про прийом ліків, але й автоматично повідомляє родичів або лікарів у разі пропуску дози, що забезпечує своєчасне втручання.
– Перегляд детальної статистики "MediReminder" надає користувачам можливість переглядати детальну статистику вживання ліків, що дозволяє лікарям та пацієнтам краще контролювати процес лікування та вносити необхідні корективи.
– Функція автоматичного замовлення ліків. Додаток автоматично відстежує кількість залишку ліків та пропонує своєчасно їх замовити, що значно полегшує управління запасами медикаментів.
– Інтуїтивний інтерфейс та легкість використання. Система розроблена з урахуванням потреб користувачів різного віку та рівня технічної підготовки, що забезпечує простоту та зручність у використанні.
– Високий рівень безпеки та конфіденційності даних. "MediReminder" забезпечує захист персональних та медичних даних користувачів відповідно до найсучасніших стандартів безпеки, що робить систему надійною для використання.

1.2.3	Припущення та залежності

•	Припускається, що основні технології, використовувані для розробки та підтримки системи "MediReminder", будуть стабільними та не зазнають значних змін протягом усього періоду розробки та впровадження. 
•	Передбачається, що користувачі матимуть доступ до стабільного інтернет-з'єднання для отримання сповіщень, оновлень та синхронізації даних. 
•	Припускається, що більшість користувачів використовують сучасні мобільні пристрої з операційними системами Android та iOS, які підтримують додаток "MediReminder".
•	Очікується, що медичні установи та лікарі будуть підтримувати та рекомендувати використання "MediReminder" своїм пацієнтам.
•	Припускається, що користувачі будуть готові впровадити нові технології в свої щоденні звички та активно використовуватимуть систему. 
•	Успіх проекту залежить від наявності та якості інфраструктури для підтримки IoT-пристроїв, включаючи стабільне інтернет-з'єднання, серверні ресурси та хмарні сервіси для зберігання даних.
•	Реалізація проекту залежить від співпраці з постачальниками апаратних компонентів для створення IoT-пристроїв, а також з розробниками програмного забезпечення для інтеграції з існуючими медичними системами.
•	Проект залежить від дотримання законодавчих та регуляторних вимог у сфері охорони здоров'я та захисту персональних даних, що може впливати на дизайн та функціональність системи.
•	Успіх "MediReminder" залежить від налагодження партнерських відносин з медичними установами та професіоналами, які підтримуватимуть впровадження та використання системи.
•	Реалізація проекту потребує достатнього фінансування та ресурсів для розробки, тестування, маркетингу та підтримки системи після впровадження.
Ці припущення та залежності визначають рамки проекту "MediReminder" та вказують на ключові фактори, від яких залежить успіх системи.

1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску

Основний функціонал початкового випуску продукту "MediReminder":
– Автоматичні нагадування про прийом ліків. Система надсилатиме нагадування пацієнтам про необхідність прийняти ліки у встановлений час, допомагаючи дотримуватися режиму лікування.
– Сповіщення родичів та лікарів. У разі пропуску дози ліків система автоматично надсилатиме сповіщення родичам або лікарям, забезпечуючи своєчасне втручання та підтримку.
– Моніторинг стану ліків. Відстеження кількості залишку ліків у контейнері та сповіщення про необхідність поповнення запасів, а також можливість автоматичного замовлення нових ліків.
– Перегляд статистики вживання ліків. Надання детальної статистики щодо прийому ліків, що дозволяє пацієнтам та лікарям аналізувати дотримання графіку лікування та ефективність терапії.
– Сумісність з мобільними платформами. Додаток буде доступний для завантаження на платформах Android та iOS, що забезпечить зручний доступ користувачів до функціоналу системи.
Переваги для різних категорій клієнтів:
– Пацієнти. Краще дотримання режиму лікування, зручний моніторинг, підтримка родичів та лікарів.
– Родичі та опікуни. Спокій та впевненість, миттєвий зв’язок.
– Лікарі та медичні заклади. Підвищена ефективність, зменшення ризику ускладнень, збільшення задоволеності пацієнтів.
Характеристики якості:
– Надійність. Система повинна надійно нагадувати про прийом ліків та вчасно сповіщати про пропуски, забезпечуючи стабільну роботу без відмов. 
– Ефективність. Відстеження вживання ліків та надання статистичних даних повинно здійснюватися швидко та ефективно, з мінімальними затримками.
– Безпека. Система повинна забезпечувати конфіденційність медичної інформації пацієнтів та безпечну передачу даних.
– Зручність використання. Інтерфейс користувача повинен бути зрозумілим та інтуїтивно зрозумілим для будь-якого користувача, забезпечуючи зручність управління та використання системи.
– Гнучкість. Система повинна бути гнучкою та здатною адаптуватися до змін у кількості пацієнтів та їхніх потреб.
– Підтримка. Забезпечення ефективної підтримки та технічної допомоги для користувачів у разі виникнення проблем чи запитань.
Цей початковий функціонал продукту забезпечує найбільшу цінність для різних категорій клієнтів та дозволяє розширити його користувацьку базу при мінімальних витратах на розробку та підтримку.
а) Адміністрування:
   1) Розробити веб-інтерфейс для адміністраторів, який дозволить керувати користувачами, пристроями, даними, статистикою і системними налаштуваннями.
   2) Забезпечити можливість керування рівнями доступу для адміністраторів та модераторів.
б) Підтримка багатьох мов та регіональних налаштувань для користувачів з різних країн.
в) Захист персональних даних:
   1) Застосування шифрування даних в покладених інформації користувачів.
   2) Забезпечення безпеки у вході користувачів та керування їх доступом до даних.
   3) Забезпечення відповідності законодавчим вимогам щодо обробки та захисту особистих даних.
г) Управління даними:
   1) Розробка алгоритмів для збору та аналізу даних з IoT-пристроїв.
   2) Використання бази даних MySQL для зберігання оброблених даних.
д) Реалізація бізнес-логіки:
   1) Розробити алгоритми для моніторингу вживання ліків, визначення пропусків та надання рекомендацій користувачам.
   2) Реалізувати систему сповіщень для користувачів.
   3) Реалізація протоколів зв'язку та збору даних від IoT-пристроїв.

1.3.2	Рамки наступних випусків

У подальших випусках продукту планується включення наступних ключових функцій, які будуть відкладені на майбутні випуски:
– Персоналізовані нагадування. Можливість налаштування індивідуальних розкладів прийому ліків для різних категорій пацієнтів.
– Мультимовний інтерфейс. Додавання підтримки різних мов для полегшення використання системи користувачами з різних країн.
– Аналітика та звіти. Розширення функціоналу для надання детальних аналітичних звітів щодо вживання ліків та ефективності лікування.
– Інтеграція зі засобами спостереження за здоров'ям. Посилання на дані від інших медичних пристроїв та додатків для комплексного моніторингу стану здоров'я пацієнтів.
– Розширена підтримка платформ. Підтримка додаткових платформ та пристроїв для розширення охоплення користувачів.
Ці функції будуть впроваджені в подальших випусках з метою постійного покращення продукту та задоволення зростаючих потреб користувачів.

1.3.3	Обмеження та винятки

Декілька функцій або характеристик продукту, які можуть бути потрібні зацікавленим сторонам, але не плануються включати до нового продукту, включають:
– Медичні консультації в реальному часі. Система не передбачає можливості надання медичних консультацій або діагностики за допомогою онлайн зв'язку. 
– Автономний режим роботи. Наразі не передбачається розроблення функціоналу для роботи системи в автономному режимі без підключення до Інтернету.
– Призначення ліків. Система не включатиме функції, пов'язані з розподілом або призначенням конкретних лікарських засобів.
– Медичні екстрені втручання. Відсутність можливості автоматичного виклику екстренної допомоги або надання медичної допомоги в разі необхідності. 
– Підтримка психологічного благополуччя. Система не має функцій для психологічної підтримки або допомоги в управлінні стресом чи емоційними станами користувачів.
Ці функції можуть бути розглянуті в подальших випусках або вказані як додаткові опції, якщо з'явиться достатній попит від користувачів чи інших зацікавлених сторін.

1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Пацієнти	Покращення дотримання режиму лікування та зручне відстеження здоров'я	Позитивне, система забезпечує контроль та підтримку у вживанні ліків	Забезпечення правильного та регулярного вживання ліків, а також контроль за станом здоров'я	Відсутність можливості медичної діагностики чи надання консультацій.
Родичі та Опікуни	Спокій та впевненість у стані здоров'я пацієнта.	Позитивне, система надає можливість вчасно отримувати сповіщення про прийом ліків пацієнтом	Швидка реакція на пропуски доз та надання допомоги у разі потреби	Обмежені можливості медичної діагностики чи надання консультацій
Лікарі та Медичні Заклади	Покращене керування пацієнтами та ефективна комунікація з ними	Позитивне, система допомагає в керуванні та моніторингу пацієнтів	Забезпечення доступу до інформації про вживання ліків та стан здоров'я пацієнтів	Відсутність можливості медичної діагностики та надання медичних консультацій через систему

1.4.2	Пріоритети проекту
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
План робіт	Випуск 1.0 стане доступним до 14.12 ц. р., випуск 1.1 - до 10.01.24	Максимальний термін затримки випуску початкової версії – 2 тижні	Версія 1.0 – відхилення max 5 днів, Версія 1.1 – відхилення max 7 днів
Функціональність	У версії 1.0: моніторинг параметрів, аналіз даних, візуалізація. У версії 1.1: можливість спілкування, можливість замовлення	Має бути реалізована вся функціональність, визначена для відповідних версій	70-80% функцій із високим пріоритетом мають бути включені до випуску 1.0
Якість	Забезпечення високої якості продукту, відповідно до вимог безпеки та надійності	Проходження 100% тестів на функціональність, безпеку та продуктивність	У випуску 1.0 повинні пройти 90-95% тестів, у випуску 1.1 - 95-98%
Персонал	Сформувати основну команду до 01.07.2025	Максимальний розмір команди: 1 людина	Недопустимо виконання проєкту у більшій команді
Бюджет	Витратити 65% бюджету на створення версії 1.0, решту на випуск 1.1	Не перевищувати загальний запланований бюджет	Допустимо перевищити бюджет на 15% без перегляду робіт

1.4.3	Робоче середовище

Середовище, в якому буде використовуватися система "MediReminder" має свої особливості та вимоги, які вплинуть на архітектуру системи. Основні аспекти середовища та вимоги щодо системи включають наступне:
– Географічно розпоширені користувачі. Користувачі системи можуть бути розташовані в різних географічних областях. Це означає, що система повинна бути готовою до роботи з користувачами з різних часових поясів.
– Доступ до системи. Користувачі можуть потребувати доступу до системи в будь-який час, оскільки здоров'я користувачів може вимагати постійного моніторингу та реагування на події в режимі реального часу.
– Максимальний час відгуку. Оскільки система має реалізовувати моніторинг здоров'я користувачів, максимальний час відгуку при доступі до даних має бути дуже коротким, особливо в ситуаціях, де швидка реакція може врятувати життя.
– Захист даних. З медичною інформацією пов'язані високі вимоги щодо конфіденційності та захисту даних. Система повинна включати засоби контролю доступу та шифрування для захисту інформації.
З урахуванням цих особливостей та вимог системи "MediReminder" архітектура повинна бути розроблена таким чином, щоб забезпечити доступність, надійність, продуктивність та цілісність даних в розподіленому та географічно розпоширеному середовищі.
Для створення веб-застосунку та мобільного додатку MediReminder і реалізації його різних компонентів будуть використані наступні інструменти та технології:
а) Front-end частина веб-застосунку:
   1) Фреймворк Angular для реалізації користувацького інтерфейсу.
   2) HTML/CSS для маркування та стилізації.
   3) JavaScript/TypeScript для логіки на клієнтському боці.
б) Back-end частина веб-застосунку:
   1) Мова програмування C#.
   2) Фреймворк ASP.NET для розробки серверної частини.
   3) База даних MySQL для зберігання даних про працівників і їх стан здоров'я.
в) Мобільний додаток (Android):
   1) Мова програмування Kotlin.
   2) Програмне забезпечення Android Studio.
г) База даних:
   1) MySQL буде використовуватися як база даних для зберігання інформації про працівників, їх стан здоров'я та дані з IoT-девайсів.

2	ПОСТАНОВКА ЗАДАЧІ

За результатами попереднього аналізу предметної області, задачею проєкту було поставлено створення програмної системи для контролю вживання користувачем ліків.
База даних повинна включати інформацію про: користувачів, ліки, девайси, розклади, статистику та повідомлення.
Для адміністратора має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	перегляд, створення, оновлення та видалення будь-якого запису із бази даних;
в)	реєстрація розумного пристрою.
Для пацієнтів системи має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	активація розумного пристрою;
в)	перегляд та видалення повідомлень;
г)	перегляд, створення, оновлення та видалення ліків;
д)	перегляд статистики;
е)	перегляд, створення, оновлення та видалення розкладу. 
Для довірених осіб системи має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	перегляд та видалення повідомлень;
в)	перегляд статистики;
г)	перегляд, створення та видалення спостережуваного пацієнта.
Для лікарів системи має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	перегляд статистики;
в)	перегляд, створення, оновлення та видалення розкладу;
г)	перегляд, створення, оновлення та видалення ліків;
д)	перегляд, створення та видалення спостережуваного пацієнта;
е)	перегляд та видалення повідомлень.
Програмна система повинна підтримувати роботу з типом датчику руху та забезпечувати їх безперебійне підключення через ESP32.
Також програмна система повинна підтримувати локалізацію та інтернаціоналізацію, а саме, забезпечувати: підтримку різних кодових таблиць символів, обчислення та формат дати та часу, локальний та універсальний час, метричні одиниці вимірювання, порядок сортування текстових значень, різні напрями введення тексту тощо.
Серверна частина системи має бути реалізована з використанням ASP.NET, а клієнтська частина - з використанням Angular. Система повинна забезпечувати високу продуктивність та надійність при обробці даних в режимі реального часу.

3	ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ
3.1	Проектування серверної частини проекту

Перед початком розробки серверної частини, необхідно чітко описати всі сутності, необхідні для втілення заданого функціоналу. Для цього можна створити модель даних ER, що дозволить візуалізувати всі сутності та їх взаємозв'язки. Після визначення всіх необхідних сутностей було розроблено модель даних ER (див. розділ Б.1 у додатку Б).
В моделі даних передбачені наступні сутності та відповідні поля для них:
а) Сутність «Адміністратор»:
    1) Ідентифікатор адміністратора;
    2) Ім’я;
    3) Прізвище;
    4) По-батькові;
    5) Електрона пошта;
    6) Пароль;
    7) Номер телефону;
    8) Роль (адміністратор).
б) Сутність «Родич/Опікун»:
    1) Ідентифікатор родича;
    2) Ім’я;
    3) Прізвище;
    4) По-батькові;
    5) Електрона пошта;
    6) Пароль;
    7) Номер телефону;
    8) Роль (опікун).
в) Сутність «Пацієнт»:
    1) Ідентифікатор пацієнта;
    2) Ім’я;
    3) Прізвище;
    4) По-батькові;
    5) Електрона пошта;
    6) Пароль;
    7) Номер телефону;
    8) Адреса;
    9) Стать;
    10) Вік;
    11) Роль (пацієнт).
г) Сутність «Ліки»:
    1) Ідентифікатор ліків;
    2) Назва;
    3) Опис;
    4) Дозування;
    5) Термін придатності;
    6) Інструкції;
    7) Кількість;
    8) Пацієнт.
д) Сутність «Розклад прийому ліків»:
    1) Ідентифікатор розкладу;
    2) Пацієнт;
    3) Ліки;
    4) Дата початку прийому;
    5) Кількість доз на день;
    6) Інтервал прийому;
    7) Розумний пристрій;
    8) Кожен N-ий день;
    9) Днів залишилося.
е) Сутність «Подія розкладу»:
    1) Ідентифікатор події;
    2) Розклад;
    3) Чи вже пізно приймати ліки;
    4) Дата та час прийому;
    5) Чи була доза пропущена;
    6) Чи були ліки прийняті.
ж) Сутність «Сповіщення»:
    1) Ідентифікатор сповіщення;
    2) Отримувач (Пацієнт/Опікун/Лікар);
    3) Тип сповіщення (нагадування, пропущена доза);
    4) Пацієнт;
    5) Текст сповіщення;
    6) Дата та час створення;
    7) Статус отримання (отримано, не отримано);
    8) Статус надсилання (відправлено, не відправлено).
и) Сутність «IoT-пристрій»:
    1) Ідентифікатор пристрою;
    2) Пацієнт;
    3) Тип пристрою;
    4) Токен аутентифікації;
    5) Чи був пристрій активований;
    6) Дата активації.
к) Сутність «Лікар-Пацієнт»:
    1) Ідентифікатор лікаря;
    2) Ідентифікатор пацієнта.
л) Сутність «Тип IoT-Пристрою»:
    1) Ідентифікатор типу;
    2) Назва.
м) Сутність «Роль користувача»:
    1) Ідентифікатор ролі;
    2) Назва.
н) Сутність «Опікун-Пацієнт»:
    1) Ідентифікатор опікуна;
    2) Ідентифікатор пацієнта.
п) Сутність «Лікар»:
    1) Ідентифікатор лікаря;
    2) Ім’я;
    3) Прізвище;
    4) По-батькові;
    5) Електрона пошта;
    6) Пароль;
    7) Номер телефону;
    8) Роль (лікар).
с) Сутність «Тип повідомлення»:
    1) Ідентифікатор типу;
    2) Назва.
	Кожен компонент у нашій системі включає поля, які є критично важливими для втілення очікуваного функціоналу. Ідентифікувавши кожний елемент системи, наступним кроком є розробка ключових прецедентів. Вивчивши функції, було сконструйовано UML-діаграму варіантів використання (див. розділ Б.2 у додатку Б), яка представляє шість основних ролей: незареєстрованого користувача, опікуна/родича, лікаря, пацієнта, адміністратора системи та розумного пристрою.
Кожна з цих ролей наділена визначеним спектром можливостей. Опікун або родич пацієнта має можливість отримувати сповіщення про пропущені дози ліків пацієнтом. Це дозволяє йому швидко реагувати та забезпечувати необхідну підтримку. Родич може переглядати розклад прийому ліків пацієнта та статистику вживання ліків для контролю за лікуванням.
Незареєстрований користувач має обмежений доступ до системи. Він може переглядати основну інформацію про додаток, зокрема, про його функціональні можливості та переваги. Незареєстрований користувач може також пройти процес реєстрації та створити новий обліковий запис для отримання повного доступу до системи. Також йому доступна сторінка входу для авторизації в системі.
Лікар має доступ до детальної статистики щодо прийому ліків своїх пацієнтів, що дозволяє йому оцінювати дотримання режиму лікування та ефективність терапії. Лікар може отримувати сповіщення про пропущені дози пацієнтами та вчасно втручатися у разі потреби. Він також може консультувати пацієнтів через додаток, надаючи рекомендації щодо лікування.
Пацієнт отримує основну користь від системи "MediReminder", а саме – автоматичні нагадування про прийом ліків у визначений час, що допомагає дотримуватися режиму лікування. Пацієнт має можливість переглядати свій розклад прийому ліків і отримувати сповіщення у разі пропуску дози. Він також може переглядати та аналізувати статистику щодо вживання ліків, що дозволяє оцінювати ефективність лікування.
Адміністратор системи має широкі повноваження для управління системою "MediReminder". Він може керувати користувачами, пристроями та системними налаштуваннями через веб-інтерфейс.
Розумний пристрій інтегрується з системою "MediReminder" для автоматичного моніторингу стану прийому ліків. Він може відстежувати прийом ліків чим надає змогу відстежувати кількість залишку ліків у контейнері, терміни придатності та надсилати сповіщення про необхідність поповнення запасів. Пристрій також забезпечує автоматичну передачу даних до системи для аналізу та зберігання, що дозволяє користувачам отримувати актуальну інформацію.
Спілкування між серверною і клієнтською частинами, а також з мобільним додатком та IoT, реалізоване за допомогою REST API. Цей тип спілкування забезпечує загальну структуру взаємодії та дозволяє легко додавати різні компоненти системи. Більш детальна інформація про взаємодію різних частин системи може бути представлена на UML-діаграмі розгортання (див. рис. 3.1).
 
Рисунок 3.1 – Діаграма розгортання (Deployment Diagram)

Для демонстрації основного функціоналу була розроблена діаграма активності (див. рис. 3.2). Вона відображає головні дії та етапи, які здійснюють пацієнти та адміністратори системи для досягнення мети. 
 
Рис. 3.2 – UML діаграма активності

Розглянемо діаграму активності (Activity diagram), зображену на рисунку 3.3. В даній діаграмі відображений алгоритм роботи створення та відправки інформації, коли користувач приймає ліки.

3.2	Проектування IoT-частини системи

IoT частина розробленого проєкту взаємодіє з фізичним середовищем пацієнта, забезпечуючи нагадування про прийом ліків. Пристрої відслідковують графік прийому медикаментів та відправляють дані на сервер. Ці дані потім аналізуються системою та зберігаються, надаючи користувачам можливість оцінки дотримання режиму лікування. Ця взаємодія представлена на діаграмі прецедентів (див. рис. 3.3).
 
Рисунок 3.3 – UML діаграма прецедентів IoT

За допомогою даної діаграми були наведені функціональні вимоги до розумних пристроїв проєкту.

3.3	Проектування клієнтської частини проекту

До системи можуть зайти п’ять типів акторів: неавторизований користувач, пацієнт, лікар, довірена особа та адміністратор. Під час першого використання система дозволяє гостю лише переглядати загальну інформацію про сервіс. Для доступу до повного функціоналу користувач має бути авторизуваним у системі.  
Пацієнт може переглядати свій профіль та статистику, свої ліки, графік прийому ліків, отримувати повідомлення про нагадування та спілкуватися з лікарем.
Лікар може створювати та редагувати графік прийому ліків, самі ліки, переглядати статистику прийому ліків пацієнтів, а також надсилати повідомлення пацієнтам.
Довірена особа може переглядати статистику прийому медикаментів пацієнта, отримувати нагадування та допомагати у відстеженні прийому ліків. 
Адміністратор має необмежений доступ до системи, включаючи керування користувачами, доступ до панелі адміністратора та конфігурації пристроїв.
Компоненти клієнтської частини:
а)	Реєстрація:
1)	Адміністратор може зареєструвати користувача в системі.
2)	Користувач (Пацієнт) вводить дані, такі як електронна пошта, пароль, повтор паролю, ім’я користувача, ім’я (не обов’язково), прізвище (не обов’язково), по-батькові (не обов’язково), номер мобільного телефону, адреса проживання, вік, стать.
б)	Вхід.
1)	Користувачі автентифікуються в системі, вводячи свої облікові дані (пошта та пароль).
Програмна система складається з наступних ключових компонентів та функціональності:
в)	Функціонал для адміністратора:
1)	Доступ до панелі адміністратора.
2)	Доступ до кожної частини інтерфейсу.
3)	Імпорт конфігурації пристрою при його реєстрації.
г)	Функціонал для пацієнта:
1)	Перегляд власного профілю, його редагування/видалення.
2)	Перегляд власних ліків, керування ними.
3)	Перегляд власного розкладу, керування ним.
4)	Перегляд власної статистики.
5)	Перегляд повідомлень, їх видалення.
6)	Активація розумного пристрою.
д)	Функціонал для лікаря:
1)	 Перегляд власного профілю, його редагування/видалення.
2)	Перегляд повідомлень, їх видалення.
3)	Перегляд спостережуваних пацієнтів, їх додавання/видалення.
4)	Перегляд ліків пацієнта, керування ними.
5)	Перегляд розкладу пацієнта, керування ним.
6)	Перегляд статистики пацієнта.
е)	Функціонал для довіреної особи:
1)	 Перегляд власного профілю, його редагування/видалення.
2)	 Перегляд повідомлень, їх видалення.
3)	 Перегляд спостережуваних пацієнтів, їх додавання/видалення.
4)	 Перегляд ліків пацієнта.
5)	 Перегляд розкладу пацієнта.
6)	Перегляд статистики пацієнта.
Розглянемо кожен пункт окремо. Головна сторінка, що включає в себе верхню панель доступу, наведена на рисунку 3.4.
 
Рисунок 3.4 – Головна сторінка
Форма для авторизації (див. рис. 3.5) включає такі компоненти:
а)	Поле введення "Email адреса" для вказання поштової скриньки користувача.
б)	Поле введення із прихованими символами "Пароль" для вказання паролю користувача.
в)	Кнопка "Увійти" синього кольору для підтвердження введених даних та переадресації користувача на сторінку його профілю в разі успіху.
Ця форма забезпечує безпечну автентифікацію користувачів, дозволяючи їм вводити свої облікові дані для входу в систему.
 
Рисунок 3.5 – Сторінка «Вхід»

Форма для реєстрації (див. рис. 3.6) включає такі компоненти:
а)	Перша поле вибору надає можливість користувачу обрати свою майбутню роль у системі (Пацієнт, Лікар або Довірена особа). Відносно вибору ролі, поля форми реєстрації змінюються.
б)	Нижче відображаються поля, котрі користувач повинен заповнити для успішної реєстрації. Деякі з полів є необов’язковими.
в)	Кнопка «Зареєструватися», що надає можливість надіслати дані до серверу на перевірку.
Ця сторінка надає користувачам можливість зареєструватися в системі як «Пацієнт», «Лікар» або ж «Довірена особа».
 
Рисунок 3.6 – Сторінка «Реєстрація»

	Сторінка профілю (див. рис. 3.7) включає такі компоненти:
	а)	Фото профілю користувача, що зберігається на сервері.
	б)	Інформація стосовно користувача системи.
	в)	Кнопка «Змінити», що надає можливість користувачу редагувати інформацію стосовно нього.
	г)	Кнопка «Видалити», що дозволяє користувачу видалити власний акаунт із системи та автоматично вийти з неї.
 
Рисунок 3.7 – Сторінка «Профіль»

Сторінка переліку ліків (див. рис. 3.8) включає такі компоненти:
а)	Заголовок «Перелік ліків».
б)	Перелік ліків у виді «карток», що мають назву, залишок, дозування, термін придатності, інструкцію та опис.
в)	Кнопка "Додати", що надає можливість додати нову «картку» ліків.
г)	Кнопка у вигляді смітника, що надає можливість видалити «картку» ліків.
ґ)	Кнопка у вигляді олівця та паперу, що надає можливість редагувати «картку» ліків.
Ця сторінка надає користувачам (Пацієнт, Лікар, Адміністратор) можливість керувати ліками пацієнта.
 
Рисунок 3.8 – Сторінка «Ліки»

Сторінка переліку повідомлень (Пацієнт) (див. рис. 3.9) включає такі компоненти:
а)	Заголовок "Перелік повідомлень".
б)	Перелік повідомлень, що мають тип, зміст та дату.
в)	Кнопка "Видалити", що надає можливість видалити одне з повідомлень.
	Ця сторінка надає пацієнтам можливість переглядати та видаляти свої повідомлення.
 
Рисунок 3.9 – Сторінка «Повідомлення (Пацієнт)»
Сторінка розкладів (див. рис. 3.10) включає такі компоненти:
а)	Заголовок «Календар».
б)	Кнопки «<»/«>», що надають можливість переглядати попередній/наступний місяць.
в)	Кнопка «Додати», що надає можливість додати новий розклад.
г)	Кнопки «month»/«list», що надають можливість відображати розклади у вигляді місяців або ж у вигляді переліку на поточний день.
ґ)	Подія у розкладі, що дозволяє користувачу при натиску видалити розклад або відмітити сьогоднішню подію, як виконану.
Ця сторінка дозволяє користувачам порівнювати статистику та тренди для різних пристроїв та показників в єдиному інтерфейсі.
 
Рисунок 3.10 – Сторінка «Календар»

Сторінка статистики (див. рис. 3.11) включає такі компоненти:
а)	Заголовок «Статистика».
б)	Перелік розкладів, що містить їх статистику, а саме «Назва ліків», «Кількість виконаних/пропущених доз», «Кількість загальних доз», «Опис ліків», «Кількість доз на день», «Інтервал між прийняттям доз на день», «Доза» та «Дати прийняття доз».

Рисунок 3.11 – Сторінка «Статистика»

Сторінка переліку повідомлень (Лікар/Опікун) (див. рис. 3.12) включає такі компоненти:
а)	Заголовок "Перелік повідомлень".
б)	Перелік повідомлень, що мають тип, зміст, дату та пацієнта, котрого стосується повідомлення.
в)	Кнопка "Видалити", що надає можливість видалити одне з повідомлень.
	Ця сторінка надає лікарям/опікунам можливість переглядати та видаляти свої повідомлення.
 
Рисунок 3.12 – Сторінка «Повідомлення (Лікар/Опікун)»

Сторінка переліку пацієнтів (Лікар/Опікун) (див. рис. 3.13) включає такі компоненти:
а)	Заголовок "Перелік пацієнтів/".
б)	Перелік пацієнтів, що мають ПІБ, користувацьке ім’я, адресу, телефон та вік.
в)	Кнопка у вигляді смітника, що надає можливість видалити зв’язок з одним з пацієнтів.
г)	Кнопка у вигляді пігулок, що надає можливість перейти до ліків одного з пацієнтів та керувати ними.
ґ)	Кнопка у вигляді кругової діаграми, що надає можливість перейти до статистики одного з пацієнтів та переглянути її.
д)	Кнопка у вигляді календаря, що надає можливість перейти до розкладів одного з пацієнтів та керувати ними.
е)	Кнопка "Додати", що надає можливість додати зв’язок з пацієнтом та додати його до переліку.
	Ця сторінка надає лікарям/опікунам можливість переглядати свої зв’язки із пацієнтами.
 
Рисунок 3.13 – Сторінка «Повідомлення (Лікар/Опікун)»

Сторінка панелі адміністрування (див. рис. 3.14) включає такі компоненти:
а)	Заголовок, що залежить від обраної моделі для адміністрування.
б)	Бокова панель зліва, що надає можливість адміністратору обрати будь-яку модель з бази даних для керування нею.
в)	Кнопка «Створити», що надає можливість адміністратору створити екземпляр обраної моделі.
г)	Кнопка у вигляді трьох рисок, що надає можливість адміністратору редагувати або видалити запис з бази даних обраної моделі.
ґ)	Перелік записів обраної моделі у базі даних.
д)	Пошуковий рядок, що надає можливість швидко відфільтрувати необхідні записи.
е)	Деякі із заголовків таблиці є кнопками, що надають можливість швидко відсортувати записи за відповідними полями.
	Ця сторінка надає адміністраторам можливість керувати усіма записами у базі даних.
 
Рисунок 3.14 – Сторінка «Панель адміністрування»

4	РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ
4.1	Архітектура та розробка серверної частини

Для створення серверної частини системи medireminder був обраний фреймворк ASP.NET завдяки його високій продуктивності та можливостям для розробки веб-додатків. ASP.NET дозволяє швидко і ефективно розробляти RESTful веб-сервіси, забезпечуючи асинхронне програмування, автоматичну валідацію даних та генерацію документації API. 
Система базується на архітектурі REST (Representational State Transfer), яка розмежовує відповідальність між клієнтом і сервером. Це полегшує розробку, тестування та масштабування системи. У випадку medireminder, це дозволяє зручно обробляти запити від різних користувачів, таких як мобільні додатки пацієнтів та інтерфейси лікарів, і надавати відповідні дані про медичні нагадування та розклади прийому ліків. 
Для зберігання даних використовується SQL Server, що забезпечує надійне збереження інформації про медичні розклади, нагадування та інші важливі дані. SQL Server пропонує широкі можливості для виконання складних запитів і аналізу даних, що є критично важливим для системи медичних нагадувань та моніторингу стану пацієнтів.
Аналізуючи архітектуру серверної секції, слід підкреслити, що вона утворена з шести взаємозалежних компонентів:
Кожен з наведених компонентів відповідає на власний функціонал:
– Компонент «Models» містить класи доменних моделей, які визначають структуру даних та їхні взаємовідносини в базі даних.
– Компонент «Interfaces» оголошує інтерфейси, що визначають контракти для компоненту «Repository», забезпечуючи відділення реалізації від абстракції.
– Компонент «Repository» реалізує патерн репозиторіїв, надаючи абстракцію для доступу до даних для компоненту «Controllers», що дозволяє виконувати операції з базою даних.
– Компонент «Data» визначає всі сутності, їх властивості та взаємозв’язки один з одним при створенні бази даних. Надає можливість використовувати контекст бази даних.
– Компонент «Dto» (Data Transfer Objects) використовується для інкапсуляції даних і передачі їх між процесами, зокрема від сервера до клієнта.
– Компонент «PostDto» використовується схожим чином як компонент «Dto», але для обробки POST-запитів для деяких моделей.
– Компонент «UpdateDto» використовується схожим чином як компонент «Dto», але для обробки PUT-запитів для деяких моделей.
– Компонент «Helper» надає незалежні функції-помічники, що використовуються у більш ніж одному файлі.
– Компонент «Services» відповідає за реалізацію сервісів, що запускаються одночасно із сервером та продовжують працювати до його припинення. Там ж є сервіс, котрий відслідковує актуальні дані щодо кожного розкладу кожного пацієнта кожну хвилину та надсилає повідомлення користувачам.
– Компонент «Controllers» відповідає за обробку вхідних HTTP запитів, виклик відповідних методів репозиторіїв та повернення відповідей клієнту.

4.1.1 Специфікація REST API

Модель	Тип методу	Посилання	Дія
Адміністратор	GET	/api/Administrators	Отримання записів всіх адміністраторів
		/api/Administrators/{adminId}	Отримання запису конкретного адміністратора за ідентифікатором
		/api/Administrators/email/{email}	Отримання запису конкретного адміністратора за поштовою скринею
	POST	/api/Administrators/
{adminId}	Створення нового запису адміністратора
	PUT	/api/Administrators/
{adminId}	Оновлення запису конкретного адміністратора
	DELETE	/api/Administrators/
{adminId}	Видалення запису конкретного адміністратора
		/api/Administrators/
acc/{adminId}	Видалення запису конкретного адміністратора та його акаунту
Лікар	GET	/api/Doctors/	Отримання записів всіх лікарів
		/api/Doctors/
{doctorId}	Отримання запису конкретного лікаря за ідентифікатором
		/api/Doctors/email/
{email}	Отримання запису конкретного лікаря за поштовою скринею
		/api/Doctors/patients/{doctorId}	Отримання запису всіх пацієнтів, що є пов’язаними із конкретним лікарем
	POST	/api/Doctors	Створення нового запису лікаря
	PUT	/api/Doctors/
{doctorId}	Оновлення запису конкретного лікаря за ідентифікатором лікаря
		/api/Doctors/uid/
{uid}	Оновлення запису конкретного лікаря за ідентифікатором акаунту
	DELETE	/api/Doctors/
{doctorId}	Видалення запису конкретного лікаря
		/api/Doctors/acc/
{doctorId}	Видалення запису конкретного лікаря та його акаунту
Розклад прийому ліків 	GET	/api/MedicationSchedules/	Отримання записів всіх розкладів
		/api/MedicationSchedules/{msheduleId}	Отримання запису конкретного розкладу за ідентифікатором
		/api/MedicationSchedules/patient/
{patientId}	Отримання записів всіх розкладів, що є пов’язаними із конкретним пацієнтом
	POST	/api/MedicationSchedules	Створення нового запису розкладу
	PUT	/api/MedicationSchedules/{msheduleId}	Оновлення запису конкретного розкладу
	DELETE	/api/MedicationSchedules/{msheduleId}	Видалення запису конкретного розкладу
Файл	GET	/api/Files/{fileName}	Отримання конкретного файлі за його назвою
Подія розкладу	GET	/api/ScheduleEvents/	Отримання записів всіх подій
		/api/ScheduleEvents/{eventId}	Отримання запису конкретної події за ідентифікатором
		/api/ScheduleEvents/patient/{patientId}	Отримання записів всіх подій, що є пов’язаними із конкретним пацієнтом
		/api/ScheduleEvents/ofToday	Отримання записів всіх подій, день виконання котрих співпадає із поточним
	POST	/api/ScheduleEvents	Створення нової події
	PUT	/api/ScheduleEvents/
{eventId}	Оновлення запису конкретної події
		/api/ScheduleEvents/activate/{eventId}	Оновлення запису конкретної події у випадку її виконання пацієнтом
	DELETE	/api/ScheduleEvents/
{eventId}	Видалення запису конкретної події
Ліки	GET	/api/Medicine/	Отримання записів всіх
ліків
		/api/Medicine/
{medicineId}	Отримання запису конкретних ліків
		/api/Medicine/patient/{patientId}	Отримання записів всіх ліків, що є пов’язаними із конкретним пацієнтом
	POST	/api/Medicine	Створення нових ліків
	PUT	/api/Medicine/
{medicineId}	Оновлення запису конкретних ліків
	DELETE	/api/Medicine/
{medicineId}	Видалення запису конкретних ліків
Повідомлення	GET	/api/Message/	Отримання записів всіх
повідомлень
		/api/Message/
{messageId}	Отримання запису конкретного повідомлення
		/api/Message/user/
{userId}	Отримання записів всіх повідомлень, що є пов’язаними із конкретним користувачем
	POST	/api/Message	Створення нового повідомлення
	PUT	/api/Message/
{messageId}	Оновлення запису конкретного повідомлення
	DELETE	/api/Message/
{messageId}	Видалення запису конкретного повідомлення
Тип повідомлення	GET	/api/MessageType/	Отримання записів всіх типів
повідомлень
		/api/MessageType/
{messageTypeId}	Отримання запису конкретного типу повідомлення
		/api/MessageType/messages/
{messageTypeId}	Отримання записів всіх повідомлень, що є пов’язаними із конкретним типом повідомлень
	POST	/api/MessageType	Створення нового типу повідомлення
	PUT	/api/MessageType/
{messageTypeId}	Оновлення запису конкретного типу повідомлення
	DELETE	/api/MessageType/
{messageTypeId}	Видалення запису конкретного типу повідомлення
Пацієнт	Get	/api/Patients/	Отримання записів всіх пацієнтів
		/api/Patients/
{doctorId}	Отримання запису конкретного пацієнта за ідентифікатором
		/api/Patients/email/{email}	Отримання запису конкретного пацієнта за поштовою скринею
		/api/Patients/
messages/
{patientId}	Отримання запису всіх повідомлень, що є пов’язаними із конкретним пацієнтом
		/api/Patients/
medicines/
{patientId}	Отримання запису всіх ліків, що є пов’язаними із конкретним пацієнтом
		/api/Patients/medication-schedules/
{patientId}	Отримання запису всіх розкладів, що є пов’язаними із конкретним пацієнтом
		/api/Patients/medication-statistics/
{patientId}	Отримання запису всієї статистики, що є пов’язаною із конкретним пацієнтом
		/api/Patients/
doctors/
{patientId}	Отримання запису всіх лікарів, що є пов’язаними із конкретним пацієнтом
		/api/Patients/
trustees/
{patientId}	Отримання запису всіх опікунів, що є пов’язаними із конкретним пацієнтом
	POST	/api/Patients	Створення нового запису пацієнта
	PUT	/api/Patients/
{patientId}	Оновлення запису конкретного пацієнта за ідентифікатором пацієнта
		/api/Patients/uid/
{uid}	Оновлення запису конкретного пацієнта за ідентифікатором акаунту
	DELETE	/api/Patients/
{patientId}	Видалення запису конкретного пацієнта
		/api/Patients/acc/
{patientId}	Видалення запису конкретного пацієнта та його акаунту
Пацієнт-Лікар	POST	/api/PatientDoctors	Створення нового запису зв’язку «Пацієнт-Лікар»
	PUT	/api/PatientDoctors/{patientId, doctorId}	Оновлення запису конкретного зв’язку «Пацієнт-Лікар»
	DELETE	/api/PatientDoctors/{patientId, doctorId}	Видалення запису конкретного зв’язку «Пацієнт-Лікар»
Пацієнт-Опікун	POST	/api/PatientTrustees	Створення нового запису зв’язку «Пацієнт-Опікун»
	PUT	/api/PatientTrustees/{patientId, trusteeId}	Оновлення запису конкретного зв’язку «Пацієнт- Опікун»
	DELETE	/api/PatientTrustees/{patientId, trusteeId}	Видалення запису конкретного зв’язку «Пацієнт- Опікун»
Розумний пристрій	GET	/api/SmartDevices	Отримання записів всіх розумних пристроїв
		/api/SmartDevices/
{smartDeviceId}	Отримання запису конкретного розумного пристрою за ідентифікатором
		/api/SmartDevices/
deviceInfo	Отримання актуальної інформації про пристрій (deviceId та token передаються у заголовках запиту)
		/api/SmartDevices/
patient/{patientId}	Отримання запису всіх пристроїв, що є пов’язаними із конкретним пацієнтом
		/api/SmartDevices/
waiting-activation	Очікування на активацію зі сторони пристрою
	POST	/api/SmartDevices/{smartDeviceId}	Створення нового запису розумного пристрою
	PUT	/api/SmartDevices/{smartDeviceId}	Оновлення запису конкретного розумного пристрою
		/api/SmartDevices/
activate	Активація розумного пристрою зі сторони пацієнта
	DELETE	/api/SmartDevices/{smartDeviceId}	Видалення запису конкретного розумного пристрою
Тип розумного пристрою	GET	/api/SmartDeviceTypes	Отримання записів всіх типів розумних пристроїв
		/api/SmartDeviceTypes/{smartDeviceTypeId}	Отримання запису конкретного типу розумного пристрою за ідентифікатором
		/api/SmartDeviceTypes/smartDevices/{smartDeviceTypeId}	Отримання запису всіх розумних пристроїв, що є пов’язаними із конкретним типом розумного пристрою
	POST	/api/SmartDeviceTypes/{smartDeviceTypeId}	Створення нового запису типу розумного пристрою
	PUT	/api/SmartDeviceTypes/{smartDeviceTypeId}	Оновлення запису конкретного типу розумного пристрою
	DELETE	/api/SmartDeviceTypes/{smartDeviceTypeId}	Видалення запису конкретного типу розумного пристрою
Опікун/
Родич	GET	/api/Trustees/	Отримання записів всіх опікунів
		/api/Trustees/
{trusteeId}	Отримання запису конкретного опікуна за ідентифікатором
		/api/Trustees/email/{email}	Отримання запису конкретного опікуна за поштовою скринею
		/api/Trustees/
patients/{trusteeId}	Отримання запису всіх пацієнтів, що є пов’язаними із конкретним опікуном
	POST	/api/Trustees	Створення нового запису опікуна
	PUT	/api/Trustees/
{trusteeId}	Оновлення запису конкретного опікуна за ідентифікатором запису
		api/Trustees/uid/
{uid}	Оновлення запису конкретного опікуна за ідентифікатором акаунту
	DELETE	/api/Trustees/
{trusteeId}	Видалення запису конкретного опікуна
		/api/Trustees/acc/
{trusteeId}	Видалення запису конкретного опікуна та його акаунту
Акаунт користувача	POST	/api/Accounts/{uid}/
upload-profile-picture	Збереження обраної користувачем світлини профілю до серверу
		/api/Accounts/
register-admin	Створення нового запису користувача типу «Адміністратор»
		/api/Accounts/
register-trustee	Створення нового запису користувача типу «Опікун»
		/api/Accounts/
register-doctor	Створення нового запису користувача типу «Лікар»
		/api/Accounts/
register-patient	Створення нового запису користувача типу «Пацієнт»
		/api/Accounts/login	Авторизація зареєстрованого користувача до системи
	GET	/api/Accounts	Отримання записів всіх акаунтів
		/api/Accounts/{uid}	Отримання запису конкретного акаунту за ідентифікатором
	DELETE	/api/Accounts/{uid}/
delete-profile-picture	Видалення світлини за ідентифікатором акаунту власника світлини
4.1.2	API для створення розкладу та його події 

Основною задачею маршруту /admin/medication-schedule є надання можливості створювати та керувати розкладами прийому ліків у системі, що є критично важливим для функціонування медичних нагадувань. 
Коли система отримує POST-запит на «/admin/medication-schedule», метод «CreateMedicationSchedule» (див. рядок 5, розділ А.1 у додатку А) виконує такі кроки:
а) перевіряє, чи має користувач необхідні права доступу (адміністратор, лікар або пацієнт) (див. рядок 2, розділ А.1 у додатку А);
б) зчитує дані нового розкладу з тіла запиту (див. рядок 5, розділ А.1 у додатку А);
в) додає новий розклад до бази даних за допомогою «_medicationScheduleRepository» (див. рядок 14, розділ А.1 у додатку А);
г) генерує відповідні події розкладу через «_eventRepository» та відповідного методу «CreateEventsToSchedule» (див. рядок 20, розділ А.1 у додатку А);
д) повертає підтвердження успішного створення або відповідний HTTP-статус з повідомленням про помилку в разі виникнення проблем.
Цей маршрут також автоматично створює події розкладу, визначаючи час прийому ліків відповідно до заданих параметрів розкладу. У разі виникнення будь-яких помилок під час виконання запиту, метод обробляє їх та повертає відповідний статус з описом проблеми (див. рядок 17 та 23, розділ А.1 у додатку А).

4.1.3	API Service для перевірки подій розкладу

Основна мета цього сервісу – забезпечення постійного моніторингу подій розкладу ліків у системі та виконання відповідних дій, таких як надсилання нагадувань і повідомлень про пропущені дози. Це критично важливо для підтримання належного рівня дотримання графіку прийому ліків пацієнтами.
При старті сервісу, метод «StartAsync» ініціалізує таймер (див. рядок 26, розділ А.2 у додатку А), який щохвилини виконує метод «DoWork» (див. рядки 30-56, розділ А.2 у додатку А). Цей метод забезпечує перевірку поточних подій розкладу. 
Метод «DoWork» виконує наступні кроки: 
1. Створює нову область (scope) для служби (див. рядок 32, розділ А.2 у додатку А). 
2. Отримує список подій розкладу на поточний день з репозиторію подій розкладу (див. рядок 37, розділ А.2 у додатку А). 
3. Проходить по всіх подіях та перевіряє їх статус:
    • Якщо залишилось 15 хвилин до прийому ліків, викликається метод SendMessageReminder (див. рядки 58-88, розділ А.2 у додатку А).
    • Якщо ліки не були прийняті протягом 5 хвилин після призначеного часу, викликається метод «SendMessageMissedDose» (див. рядок 90-166, розділ А.2 у додатку А).
Надсилання нагадувань. Метод «SendMessageReminder»:
1. Отримує дані про пацієнта та ліки з відповідних репозиторіїв (див. рядки 69-71, розділ А.2 у додатку А). 
2. Формує та надсилає повідомлення пацієнту з нагадуванням про прийом ліків через 15 хвилин (див. рядки 73-87, розділ А.2 у додатку А).
Повідомлення про пропущену дозу. Метод «SendMessageMissedDose»: 
1. Отримує дані про пацієнта, ліки, опікунів та лікарів (див. рядки 103-107, розділ А.2 у додатку А). 
2. Створює повідомлення про пропущену дозу для пацієнта та всіх пов'язаних з ним опікунів і лікарів (див. рядки 109-161, розділ А.2 у додатку А). 
3. Оновлює статус події розкладу як пропущену (див. рядки 162-165, розділ А.2 у додатку А). 
Завершення роботи сервісу. Метод «StopAsync» (див. рядок 173, розділ А.2 у додатку А) зупиняє таймер при завершенні роботи сервісу, а метод «Dispose» (див. рядок 179, розділ А.2 у додатку А) звільняє ресурси таймера. 
Цей сервіс забезпечує надійний механізм моніторингу та управління подіями розкладу, що критично важливо для підтримання належного рівня медичної допомоги.

4.1.4	API для активації пацієнтом події розкладу

Маршрут PUT «/activate/{scheduleEventId}» призначений для активації події розкладу за ідентифікатором. Цей маршрут доступний тільки для адміністраторів та пацієнтів (див. рядок 2, розділ А.3 у додатку А).
Логіка активації події:
1. Перевірка існування події:
    • Якщо подія розкладу з наданим ідентифікатором не існує, повертається статус 404 Not Found (див. Рядки 8-9, розділ А.3 у додатку А). 
    • Якщо модель стану недійсна, повертається статус 400 Bad Request (див. рядки 11-12, розділ А.3 у додатку А). 
2. Активація події:
    • Отримується подія розкладу з репозиторію (див. рядок 14, розділ А.3 у додатку А).
    • Встановлюється статус активації події в true (див. рядок 15, розділ А.3 у додатку А).
    • Якщо оновлення події в базі даних не вдається, повертається статус 500 Internal Server Error з повідомленням про помилку (див. рядки 16-20, розділ А.3 у додатку А).
3. Оновлення кількості ліків:
    • Отримується інформація про ліки, пов'язані з подією розкладу (див. рядок 22, розділ А.3 у додатку А). 
    • Вираховується нова кількість ліків, віднімаючи дозу від поточної кількості (див. рядок 23, розділ А.3 у додатку А). 
    • Якщо нова кількість ліків менше нуля, повертається статус 500 Internal Server Error з повідомленням про недостатню кількість ліків (див. рядки 24-28, розділ А.3 у додатку А). 
    • Оновлюється кількість ліків у базі даних (див. рядок 33, розділ А.3 у додатку А). 
    • Якщо оновлення ліків не вдається, повертається статус 500 Internal Server Error з повідомленням про помилку (див. рядок 34, розділ А.3 у додатку А).
Відповідь сервісу. Після успішної активації події та оновлення кількості ліків, сервіс повертає відповідь 200 OK з інформацією про успішне виконання операції (див. рядок 37, розділ А.3 у додатку А).
Цей API маршрут забезпечує надійну механіку для пацієнтів з метою активації подій розкладу, підтримуючи актуальність даних про прийом ліків та їх кількість у системі.

4.2 Архітектура та розробка IoT частини

Для реалізації функціональностей IoT частини системи використано мову програмування C++. Програма працює на платформі ESP32 та взаємодіє з сервером через бібліотеку WiFi та HTTPClient, використовуючи протокол HTTP для обміну даними.
Компоненти системи: 
    • Модуль RTC_DS3231 для відстеження реального часу.
    • Датчик руху, який зчитує стан та передає дані на сервер.
    • LittleFS для зберігання конфігурації пристрою.
Датчик руху постійно зчитує стан і, при зміні стану, надсилає дані на сервер. Програма з’єднується з WiFi мережею та сервером для передачі інформації про рух та отримання конфігураційних даних.
Основні функції:
    • «readFile» та «writeFile»: зчитують та записують конфігурацію пристрою з файлу config.json.
    • «getCurrentDateTime»: отримує поточний час з модуля RTC_DS3231. 
    • «workflow»: відстежує стан датчика руху та, при зміні стану, відправляє дані на сервер. 
    • «activate»: активує пристрій на сервері, якщо пацієнт не ідентифікований. 
    • «setup»: ініціалізує всі необхідні компоненти та встановлює з'єднання з WiFi. 
    • «loop»: постійно відстежує стан датчика руху та періодично оновлює інформацію про пристрій на сервері.
Надсилання даних реалізоване за допомогою HTTP POST-запиту, де дані формуються у форматі JSON. Використання JSON дозволяє структуровано представляти дані та забезпечує зручний обмін інформацією між IoT пристроєм і сервером. Дані включають інформацію про пацієнта, розклад прийому ліків та час події.
Використання бібліотеки WiFi у сполученні з C++ забезпечує ефективну взаємодію та оптимальне використання ресурсів пристрою для передачі даних на сервер. 
Ця система забезпечує ефективний моніторинг стану пацієнта та своєчасне інформування про прийом ліків, використовуючи сучасні технології IoT та програмування на C++.

4.3 Архітектура та розробка web частини

Для реалізації веб-інтерфейсу проєкту було обрано Angular з TypeScript. Цей вибір був обумовлений декількома ключовими факторами: 
    • Масштабованість та структурованість. Angular використовує компонентний підхід, що дозволяє створювати масштабовані та добре структуровані додатки. Компоненти можна легко повторно використовувати та тестувати, що сприяє підвищенню якості коду. 
    • Статична типізація. Використання TypeScript додає статичну типізацію до JavaScript, що допомагає виявляти помилки на етапі компіляції, а не під час виконання. Це значно покращує надійність та стабільність коду, а також підвищує продуктивність розробників завдяки автодоповненню та інтеграції з IDE.
    • Вбудовані рішення для управління станом. Angular пропонує потужні інструменти для роботи з формами та управління станом, зокрема реактивні форми та бібліотеку RxJS для обробки асинхронних подій. Це дозволяє ефективно управляти станом додатка та забезпечувати високу гнучкість.
    • Активна спільнота та підтримка: Angular має велику та активну спільноту розробників, а також підтримується Google. Це забезпечує доступ до багатьох ресурсів, бібліотек та інструментів, а також регулярні оновлення та виправлення. 
Проєкт побудований за архітектурним стилем SPA (Single Page Application). Цей підхід був обраний з кількох причин:
    • Швидкість та продуктивність. SPA забезпечує миттєве завантаження контенту та швидку взаємодію користувача з додатком. Після початкового завантаження, всі подальші взаємодії з сервером здійснюються через AJAX-запити, що дозволяє оновлювати лише необхідні частини сторінки без повного перезавантаження. 
    • Інтерактивність. Динамічне оновлення сторінки без перезавантаження створює більш плавний і зручний користувацький інтерфейс. Це дозволяє створювати сучасні веб-додатки з високим рівнем інтерактивності, що підвищує задоволеність користувачів.
    • Зручність розробки та підтримки. SPA спрощує розробку та підтримку додатків, оскільки більшість логіки виконується на стороні клієнта. Це дозволяє легко розширювати функціональність та інтегрувати нові компоненти без значних змін в архітектурі додатка.
    • Оптимізація для мобільних пристроїв. SPA забезпечує кращу підтримку мобільних пристроїв завдяки швидкому завантаженню та можливості створення адаптивних інтерфейсів.
Об'єднання Angular з TypeScript та використання SPA архітектури дозволяє створити ефективний, зручний та продуктивний веб-додаток, що відповідає сучасним вимогам користувачів і забезпечує високу якість і надійність програмного забезпечення.
Для ілюстрації структури веб-інтерфейсу проекту була розроблена діаграма компонентів (див. рис. 4.2).

Рисунок 4.2 – UML діаграма компонентів веб-клієнту системи

Щоб показати всі можливі дії користувача в системі, було створено діаграму діяльності (див. рис. 4.3). Ця діаграма детально демонструє доступні користувачу дії та етапи, які необхідно пройти для їх виконання.

Рисунок 4.3 – UML діаграма діяльності веб-клієнту системи

ВИСНОВКИ

У рамках курсового проекту було проведено детальне концептуальне моделювання та глибокий аналіз предметної області управління прийомом ліків пацієнтами. На основі цього аналізу було створено програмну систему, яка допомагає оптимізувати процес прийому ліків, надаючи інструменти для моніторингу та нагадування пацієнтам. 
Розробка включала створення концептуальної моделі всіх частин системи, що дозволило краще зрозуміти потреби користувачів та визначити основні вимоги до неї. Була розроблена фізична модель даних. Серверна частина була реалізована на платформі C#, використовуючи ASP.NET Core для створення високопродуктивного веб-сервісу RESTful. База даних реалізована на SQL Server для забезпечення високої продуктивності та надійності зберігання даних. На стороні клієнта було використано Angular з TypeScript, що забезпечує динамічний та інтерактивний інтерфейс користувача. Код для IoT пристрою, що контролює прийом ліків, був написаний на C++ для ESP32, використовуючи різні датчики та бібліотеки. 
В результаті проведеної роботи була створена програмна система управління прийомом ліків, яка надає користувачам інструменти для ефективного управління графіком прийому, забезпечує зручний доступ до статистики та аналітики, відстежує прийом ліків у режимі реального часу та автоматизує процес нагадувань. Система також дозволяє створювати резервні копії баз даних для забезпечення безпеки та відновлення даних. 
Загалом, розроблена система є корисним інструментом для лікарів, адміністраторів та пацієнтів. Вона не лише спрощує та підвищує ефективність управління процесом прийому ліків, але й полегшує аналіз ефективності лікування, що дозволяє приймати обґрунтовані рішення щодо подальших дій.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Angular documentation / Angular. URL: https://v17.angular.io/docs (дата звернення: 18.07.2024).
2.	ASP.NET documentation / Microsoft. URL: https://learn.microsoft.com/en-us/aspnet/core / (дата звернення: 18.07.2024).
3.	FullCalendar Documentation / FullCalendar. URL: https://fullcalendar.io/docs (дата звернення: 18.07.2024).
4. Redis documentation / Redis. URL: https://redis.io/docs/latest/ (дата звернення: 18.07.2024).
5. Android Studio / Google LLC. URL: https://developer.android.com/studio (дата звернення: 18.07.2024).
6. Kotlin docs / JetBrains. URL: https://kotlinlang.org/docs/home.html (дата звернення: 18.07.2024).
 
Додатки

ДОДАТОК А
КОД З ФАЙЛІВ ПРОГРАМИ
А.1 Створення розкладу та його події, файл «MedicationScheduleController.cs»
 1         [HttpPost]
 2         [Authorize(Roles = "Administrator,Doctor,Patient")]
 3         [ProducesResponseType(204)]
 4         [ProducesResponseType(400)]
 5         public IActionResult CreateMedicationSchedule([FromBody] 
MedicationScheduleDto medicationScheduleCreate)
 6         {
 7             if (medicationScheduleCreate == null)
 8                 return BadRequest(ModelState);
 9
10             if (!ModelState.IsValid)
11                 return BadRequest(ModelState);
12
13             var _medicationScheduleMap = 
_mapper.Map<MedicationSchedule>(medicationScheduleCreate);
14             if 
(!_medicationScheduleRepository.CreateMedicationSchedule
(_medicationScheduleMap))
15             {
16                 ModelState.AddModelError("", "Something went wrong 
while saving schedule");
17                 return StatusCode(500, ModelState);
18             }
19
20             if 
(!_eventRepository.CreateEventsToSchedule
(_medicationScheduleMap))
21             {
22                 ModelState.AddModelError("", "Something went wrong 
while saving schedule events");
23                 return StatusCode(500, ModelState);
24             }
25
26             return Ok(new { ok = true });
27         }

А.2 Service для перевірки подій розкладу, файл «MedReminderService.cs»
  1 using medireminder.Interfaces;
  2 using medireminder.Models;
  3
  4 public class MedReminderService : IHostedService, IDisposable
  5 {
  6     private readonly IServiceProvider _serviceProvider;
  7
  8     private Timer _timer;
  9     private readonly int _checkEveryNSeconds = 60;
 10     private readonly int _remindBeforeNMinutes = 15;
 11     private readonly int _tooLateNMinutes = 5;
 12
 13     enum MessageTypes
 14     {
 15         SkippedDose = 1,
 16         Reminder = 2,
 17         FewMedicinesLeft = 3
 18     }
 19
 20     public MedReminderService(IServiceProvider serviceProvider) {
 21         _serviceProvider = serviceProvider;
 22     }
 23
 24     public Task StartAsync(CancellationToken cancellationToken)
 25     {
 26         _timer = new Timer(DoWork, null, TimeSpan.Zero, 
TimeSpan.FromSeconds(_checkEveryNSeconds));
 27         return Task.CompletedTask;
 28     }
 29
 30     private void DoWork(object state)
 31     {
 32         using (var scope = _serviceProvider.CreateScope())
 33         {
 34             IScheduleEventRepository _eventRepository =
 35             scope.ServiceProvider    
.GetRequiredService<IScheduleEventRepository>();
 36
 37             var events = 
_eventRepository.GetScheduleEventsOfToday();
 38             if (events.Count > 0)
 39             {
 40                 foreach (var _event in events)
 41                 {
 42                     var medTime = 
DateTimeToMinutes((DateTime)_event.MedicationTime);
 43                     var curTime = 
DateTimeToMinutes(DateTime.Now);
 44
 45                     if (medTime - curTime == 
_remindBeforeNMinutes)
 46                     {
 47                         SendMessageReminder(scope, _event);
 48                     }
 49                     else if (curTime - medTime >= 
_tooLateNMinutes)
 50                     {
 51                         SendMessageMissedDose(scope, _event);
 52                     }
 53                 }
 54             }
 55         }
 56     }
 57
 58     private void SendMessageReminder(IServiceScope scope, 
ScheduleEvent _event)
 59     {
 60         IPatientRepository _patientRepository =
 61  		scope.ServiceProvider.GetRequiredService               
<IPatientRepository>();
 62         IMedicineRepository _medicineRepository =
 63  		scope.ServiceProvider.GetRequiredService               
<IMedicineRepository>();
 64         IMessageTypeRepository _messageTypeRepository =
 65			scope.ServiceProvider.GetRequiredService 	                
<IMessageTypeRepository>();
 66         IMessageRepository _messageRepository =
 67            scope.ServiceProvider.GetRequiredService     
<IMessageRepository>();
 68
 69         var patient = _patientRepository.GetPatient
(_event.MedicationSchedule.PatientId);
 70         var medicine = 
_medicineRepository.GetMedicine(_event.MedicationSchedule.MedicineId);
 71         var messageType = 
_messageTypeRepository.GetMessageType((int)MessageTypes.Reminder);
 72
 73         var message = new Message
 74         {
 75             MessageId = 0,
 76             MessageType = messageType,
 77             MessageTypeId = (int)MessageTypes.Reminder,
 78             Patient = patient,
 79             PatientId = patient.PatientId,
 80             Receiver = patient.ApplicationUser,
 81             Text = $"Через 15 хвилин, Вам необхідно прийняти 
ліки: {medicine.Name}",
 82             CreatedAt = DateTime.UtcNow,
 83             IsReceived = false,
 84             IsRead = false
 85         };
 86
 87         _messageRepository.CreateMessage(message);
 88     }
 89
 90     private void SendMessageMissedDose(IServiceScope scope, 
ScheduleEvent _event)
 91     {
 92         IPatientRepository _patientRepository =
 93            scope.ServiceProvider.GetRequiredService     
<IPatientRepository>();
 94         IMedicineRepository _medicineRepository =
 95            scope.ServiceProvider.GetRequiredService     
<IMedicineRepository>();
 96         IMessageTypeRepository _messageTypeRepository =
 97            scope.ServiceProvider.GetRequiredService     
<IMessageTypeRepository>();
 98         IMessageRepository _messageRepository =
 99            scope.ServiceProvider.GetRequiredService     
<IMessageRepository>();
100         IScheduleEventRepository _eventRepository =
101            scope.ServiceProvider.GetRequiredService     
<IScheduleEventRepository>();
102
103         var patient = 
_patientRepository.GetPatient(_event.MedicationSchedule.PatientId);
104         var medicine = 
_medicineRepository.GetMedicine(_event.MedicationSchedule.MedicineId);
105         var messageType = 
_messageTypeRepository.GetMessageType((int)MessageTypes.SkippedDose);
106         var trustees = 
_patientRepository.GetTrusteesByPatient(_event.MedicationSchedule.PatientId);
107         var doctors = 
_patientRepository.GetDoctorsByPatient(_event.MedicationSchedule.PatientId);
108
109         var messages = new List<Message>();
110         for (int i = 0; i < trustees.Count; i++)
111         {
112             var message = new Message
113             {
114                 MessageId = 0,
115                 MessageType = messageType,
116                 MessageTypeId = (int)MessageTypes.SkippedDose,
117                 Patient = patient,
118                 PatientId = patient.PatientId,
119                 Receiver = trustees.ElementAt(i).ApplicationUser,
120                 Text = $"Користувач 
{patient.ApplicationUser.UserName} не прийняв ліки: {medicine.Name}",
121                 CreatedAt = DateTime.UtcNow,
122                 IsReceived = false,
123                 IsRead = false
124             };
125             messages.Add(message);
126         }
127         for (int i = 0; i < doctors.Count; i++)
128         {
129             var message = new Message
130             {
131                 MessageId = 0,
132                 MessageType = messageType,
133                 MessageTypeId = (int)MessageTypes.SkippedDose,
134                 Patient = patient,
135                 PatientId = patient.PatientId,
136                 Receiver = doctors.ElementAt(i).ApplicationUser,
137                 Text = $"Пацієнт 
{patient.ApplicationUser.UserName} не прийняв ліки: {medicine.Name}",
138                 CreatedAt = DateTime.UtcNow,
139                 IsReceived = false,
140                 IsRead = false
141             };
142             messages.Add(message);
143         }
144         messages.Add(new Message
145         {
146             MessageId = 0,
147             MessageType = messageType,
148             MessageTypeId = (int)MessageTypes.SkippedDose,
149             Patient = patient,
150             PatientId = patient.PatientId,
151             Receiver = patient.ApplicationUser,
152             Text = $"Сьогодні Ви не прийняли ліки: 
{medicine.Name}",
153             CreatedAt = DateTime.UtcNow,
154             IsReceived = false,
155             IsRead = false
156         });
157
158         for (int i = 0; i < messages.Count; i++)
159         {
160             _messageRepository.CreateMessage(messages[i]);
161         }
162         var oldEvent = 
_eventRepository.GetScheduleEvent(_event.ScheduleEventId);
163         oldEvent.MissedDose = true;
164         oldEvent.PastNeededTime = true;
165         _eventRepository.UpdateScheduleEvent(oldEvent);
166     }
167
168     private int DateTimeToMinutes(DateTime dateTime)
169     {
170         return (dateTime.Hour * 60) + dateTime.Minute;
171     }
172
173     public Task StopAsync(CancellationToken cancellationToken)
174     {
175         _timer?.Change(Timeout.Infinite, 0);
176         return Task.CompletedTask;
177     }
178
179     public void Dispose()
180     {
181         _timer?.Dispose();
182     }
183 }

А.3 API для активації пацієнтом події розкладу, файл «ScheduleEventController.cs»
 1         [HttpPut("activate/{scheduleEventId}")]
 2         [Authorize(Roles = "Administrator,Patient")]
 3         [ProducesResponseType(204)]
 4         [ProducesResponseType(400)]
 5         [ProducesResponseType(404)]
 6         public IActionResult ActivateScheduleEvent(int 
scheduleEventId)
 7         {
 8             if 
(!_scheduleEventRepository.ScheduleEventExists
(scheduleEventId))
 9                 return NotFound();
10
11             if (!ModelState.IsValid)
12                 return BadRequest();
13
14             var sEvent = 
_scheduleEventRepository.GetScheduleEvent(scheduleEventId);
15             sEvent.Activated = true;
16             if 
(!_scheduleEventRepository.UpdateScheduleEvent(sEvent))
17             {
18                 ModelState.AddModelError("", "Something went wrong 
updating scheduleEvent");
19                 return StatusCode(500, ModelState);
20             }
21
22             var medicine = _medicineRepository.GetMedicine
(sEvent.MedicationSchedule.MedicineId);
23             var newQuantity = medicine.Quantity - medicine.Dosage;
24             if (newQuantity < 0)
25             {
26                 ModelState.AddModelError("", "Medicine's quantity 
is not enough");
27                 return StatusCode(500, ModelState);
28             }
29
30             medicine.Quantity = newQuantity;
31             if (!_medicineRepository.UpdateMedicine(medicine))
32             {
33                 ModelState.AddModelError("", "Something went wrong 
updating medicine");
34                 return StatusCode(500, ModelState);
35             }
36
37             return Ok(new { ok = true });
38         }

ДОДАТОК Б
ДІАГРАМИ
Б.1 Діаграма ER-модель даних
 
Б.2 Діаграма UML-діаграма прецедентів
 
Б.3 Діаграма взаємодії для IoT частини системи

Б.4 Діаграма діяльності для IoT частини системи